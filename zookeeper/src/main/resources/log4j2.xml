<!-- status="OFF"，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF -->
<!-- OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- 单位为秒。即在服务运行过程中发生了log4j2配置文件的修改，log4j2能够在monitorInterval时间范围重新加载配置，无需重启应用。 -->
<configuration status="OFF" monitorInterval="60">
       
    <Properties>
                <!-- （*必须,各应用需要修改） 部署应用的名称,命名规则 :全部小写字母、中短横线、数字,与微服务命名,disconf中命名一致 -->
               
        <property name="APPNAME">zookeeper</property>
                <!-- （各应用需要修改）部署应用的端口号，用于一台服务器部署多台应用的情况,如果不需要，保持默认 -->
               
        <property name="PORT">${sys:crtServerPort:-8080}</property>
                <!-- （各应用需要修改）日志文件本地存放目录路径 建议各个环境跟生产环境统一起来,方便维护 -->
               
        <property name="logBaseFolder">/data/logs/zookeeper</property>

                <!-- 日志文件名称的前缀部分，以下为建议值 -->
               
        <property name="logFileNamePrefix">${APPNAME}</property>
                <!-- 日志文件最小切割单位 值不做强制要求，建议300MB -->
               
        <property name="every_file_size">300MB</property>
                <!-- *必须并强制遵守 日志文件的编码 -->
               
        <property name="log_charset">UTF-8</property>
                <!-- *必须并强制遵守 日志格式说明：
            日志时间 %d{yyyy-MM-dd HH:mm:ss.SSS}
            |日志级别 %p
            |应用名称(上面有定义) ${APPNAME}
            |端口号(上面有定义) ${PORT}
            |线程id %t
            |类名 %logger
            |方法名 %M
            |输出语句所在的行号 %L
            |traceId %X{MDCCRT_GUID_TRACEID}
            |输入参数 %X{MDCCRT_INPUT_PARAM}
            |输出参数 %X{MDCCRT_OUTPUT_PARAM}
            |耗时 %X{MDCCRT_COST_TIME}
            |%X{MDCCRT_EXTENTS}
            |具体打印的msg内容然后换行 %m%n -->
               
        <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS}|%p|${APPNAME}|${PORT}|%t|%logger|%M|%L|%m%n</property>
           
    </Properties>


       
    <appenders>
                <!-- 用来控制台输出 -->
               
        <Console name="console" target="SYSTEM_OUT">
                       
            <PatternLayout pattern="${log_pattern}"/>
                   
        </Console>

                <!-- 以下是建议的日志压缩包目录的格式名称 -->
                <!-- name：Appender名称
             immediateFlush：log4j2接收到日志事件时，是否立即将日志刷到磁盘。默认为true。
             fileName：日志存储路径
             filePattern：历史日志封存路径。其中%d{yyyyMMddHH}表示了封存历史日志的时间单位（目前单位为小时，yyyy表示年，MM表示月，dd表示天，HH表示小时，mm表示分钟，ss表示秒，SS表示毫秒）。注意后缀，log4j2自动识别zip等后缀，表示历史日志需要压缩。 -->
        <RollingRandomAccessFile name="all"
                                 fileName="${logBaseFolder}/${logFileNamePrefix}-all.log"
                                 filePattern="${logBaseFolder}/%d{yyyy-MM-dd}/${logFileNamePrefix}-all-%d{yyyyMMdd-HH}.%i.log.gz"
                                 immediateFlush="false">

                        <!-- 日志输出格式 -->
                       
            <PatternLayout charset="${log_charset}" pattern="${log_pattern}"/>
                        <!-- interval：表示历史日志封存间隔时间，单位为filePattern设置的单位值
                 modulate：表示是否历史日志生成时间纠偏，纠偏以零点为基准进行。比如：15:16生成了msg.2017041715.zip文件，那么纠偏后会在16:00生成msg.2017041716.zip-->
                       
            <Policies>
                               
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                               
                <SizeBaseDTriggeringPolicy size="${every_file_size}"/>
                           
            </Policies>
            <!-- 保存24小时历史日志 -->
                       
            <DefaultRolloverStrategy max="24"/>
                       
            <Filters>
                                <!-- level，表示最低接受的日志级别，博客配置的为INFO，即我们期望打印INFO级别以上的日志。
                     onMatch，表示当日志事件的日志级别与level一致时，应怎么做。一般为ACCEPT，表示接受。
                     onMismatch，表示日志事件的日志级别与level不一致时，应怎么做。一般为DENY，表示拒绝。也可以为NEUTRAL表示中立 -->
                               
                <ThresholdFilter onMismatch="DENY" onMatch="ACCEPT" level="WARN"/>
                           
            </Filters>
                   
        </RollingRandomAccessFile>


                <!-- error File Config -->
               
        <RollingRandomAccessFile name="errorLog"
                                 filePattern="${logBaseFolder}/%d{yyyy-MM-dd}/${logFileNamePrefix}-error-%d{yyyyMMdd-HH}.%i.log.gz"
                                 fileName="${logBaseFolder}/${logFileNamePrefix}-error.log"
                                 immediateFlush="false">
                       
            <PatternLayout charset="${log_charset}" pattern="${log_pattern}"/>
                       
            <Policies>
                               
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                               
                <SizeBaseDTriggeringPolicy size="${every_file_size}"/>
                           
            </Policies>
                       
            <Filters>
                                <!-- 只显示error信息 -->
                               
                <ThresholdFilter onMismatch="DENY" onMatch="ACCEPT" level="ERROR"/>
                           
            </Filters>
        </RollingRandomAccessFile>
           
    </appenders>

    <loggers>
                <!-- 各应用按实际情况自行定义相关类的输出级别 -->
               
        <AsyncLogger name="org.apache" level="WARN"/>
               
        <AsyncLogger name="org.spark_project" level="WARN"/>

               
        <asyncRoot level="INFO">
                        <!-- 各应用自行调整，日志输出至文件，自动按时间、按文件大小进行归档 ,生产环境调默认为INFO，如有特殊需求，在disconf动态调级 -->
                       
            <appender-ref level="DEBUG" ref="all"/>

                        <!-- 日志输出至Console，仅在IDE开发时打开方便开发人员，部署到服务器之后必须置为OFF，level设置为OFF表示禁用Console控制台日志输出 -->
                       
            <appender-ref level="TRACE" ref="console"/>

                        <!-- 异常日志，不用改动 -->
                       
            <appender-ref level="ERROR" ref="errorLog"/>
                   
        </asyncRoot>
           
    </loggers>
</configuration>
